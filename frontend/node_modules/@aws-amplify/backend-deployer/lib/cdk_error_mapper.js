import { AmplifyError, AmplifyFault, AmplifyUserError, } from '@aws-amplify/platform-core';
/**
 * Transforms CDK error messages to human readable ones
 */
export class CdkErrorMapper {
    formatter;
    multiLineEolRegex = '[\r\n]+';
    /**
     * Instantiate with a formatter that will be used for formatting CLI commands in error messages
     */
    constructor(formatter) {
        this.formatter = formatter;
    }
    getAmplifyError = (error) => {
        let underlyingError = error;
        // Check if there was an Amplify error thrown during child process execution
        const amplifyError = AmplifyError.fromStderr(error.message);
        if (amplifyError) {
            return amplifyError;
        }
        const matchingError = this.getKnownErrors().find((knownError) => knownError.errorRegex.test(error.message));
        if (matchingError) {
            // Extract meaningful contextual information if available
            const matchGroups = error.message.match(matchingError.errorRegex);
            if (matchGroups && matchGroups.length > 1) {
                // If the contextual information can be used in the error message use it, else consider it as a downstream cause
                if (matchGroups.groups) {
                    for (const [key, value] of Object.entries(matchGroups.groups)) {
                        const placeHolder = `{${key}}`;
                        if (matchingError.humanReadableErrorMessage.includes(placeHolder)) {
                            matchingError.humanReadableErrorMessage =
                                matchingError.humanReadableErrorMessage.replace(placeHolder, value);
                            // reset the stderr dump in the underlying error
                            underlyingError = undefined;
                        }
                    }
                    // remove any trailing EOL
                    matchingError.humanReadableErrorMessage =
                        matchingError.humanReadableErrorMessage.replace(new RegExp(`${this.multiLineEolRegex}$`), '');
                }
                else {
                    underlyingError.message = matchGroups[0];
                }
            }
            return matchingError.classification === 'ERROR'
                ? new AmplifyUserError(matchingError.errorName, {
                    message: matchingError.humanReadableErrorMessage,
                    resolution: matchingError.resolutionMessage,
                }, underlyingError)
                : new AmplifyFault(matchingError.errorName, {
                    message: matchingError.humanReadableErrorMessage,
                    resolution: matchingError.resolutionMessage,
                }, underlyingError);
        }
        return AmplifyError.fromError(error);
    };
    getKnownErrors = () => [
        {
            errorRegex: /ExpiredToken|Error: The security token included in the request is expired/,
            humanReadableErrorMessage: 'The security token included in the request is invalid.',
            resolutionMessage: "Please update your AWS credentials. You can do this by running `aws configure` or by updating your AWS credentials file. If you're using temporary credentials, you may need to obtain new ones.",
            errorName: 'ExpiredTokenError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Access Denied/,
            humanReadableErrorMessage: 'The deployment role does not have sufficient permissions to perform this deployment.',
            resolutionMessage: 'Ensure your deployment role has the AmplifyBackendDeployFullAccess role along with any additional permissions required to deploy your backend definition.',
            errorName: 'AccessDeniedError',
            classification: 'ERROR',
        },
        {
            errorRegex: /(Has the environment been bootstrapped)|(Is account \d+ bootstrapped)|(Is this account bootstrapped)/,
            humanReadableErrorMessage: 'This AWS account and region has not been bootstrapped.',
            resolutionMessage: 'Run `cdk bootstrap aws://{YOUR_ACCOUNT_ID}/{YOUR_REGION}` locally to resolve this.',
            errorName: 'BootstrapNotDetectedError',
            classification: 'ERROR',
        },
        {
            errorRegex: /This CDK CLI is not compatible with the CDK library used by your application\. Please upgrade the CLI to the latest version\./,
            humanReadableErrorMessage: "Installed 'aws-cdk' is not compatible with installed 'aws-cdk-lib'.",
            resolutionMessage: "Make sure that version of 'aws-cdk' is greater or equal to version of 'aws-cdk-lib'",
            errorName: 'CDKVersionMismatchError',
            classification: 'ERROR',
        },
        {
            errorRegex: new RegExp(`(SyntaxError|ReferenceError|TypeError)( \\[[A-Z_]+])?:((?:.|${this.multiLineEolRegex})*?at .*)`),
            humanReadableErrorMessage: 'Unable to build the Amplify backend definition.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'SyntaxError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Unable to resolve AWS account to use/,
            humanReadableErrorMessage: 'Unable to resolve AWS account to use. It must be either configured when you define your CDK Stack, or through the environment',
            resolutionMessage: 'You can retry your last request as this is most likely a transient issue: https://github.com/aws/aws-cdk/issues/24744. If the error persists ensure your local AWS credentials are valid.',
            errorName: 'CDKResolveAWSAccountError',
            classification: 'ERROR',
        },
        {
            errorRegex: /EACCES(.*)/,
            humanReadableErrorMessage: 'File permissions error',
            resolutionMessage: 'Check that you have the right access permissions to the mentioned file',
            errorName: 'FilePermissionsError',
            classification: 'ERROR',
        },
        {
            errorRegex: new RegExp(`\\[ERR_MODULE_NOT_FOUND\\]:(.*)${this.multiLineEolRegex}|Error: Cannot find module (.*)`),
            humanReadableErrorMessage: 'Cannot find module',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for missing file or package imports. Try installing them with your package manager.',
            errorName: 'ModuleNotFoundError',
            classification: 'ERROR',
        },
        {
            // Truncate the cdk error message's second line (Invoke the CLI in sequence, or use '--output' to synth into different directories.)
            errorRegex: /Another CLI (.*) is currently(.*)\. |Other CLIs (.*) are currently reading from(.*)\. /,
            humanReadableErrorMessage: 'Multiple sandbox instances detected.',
            resolutionMessage: 'Make sure only one instance of sandbox is running for this project',
            errorName: 'MultipleSandboxInstancesError',
            classification: 'ERROR',
        },
        {
            // Also extracts the first line in the stack where the error happened
            errorRegex: new RegExp(`\\[esbuild Error\\]: ((?:.|${this.multiLineEolRegex})*?at .*)`),
            humanReadableErrorMessage: 'Unable to build the Amplify backend definition.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'ESBuildError',
            classification: 'ERROR',
        },
        {
            // Also extracts the first line in the stack where the error happened
            errorRegex: new RegExp(`[âœ˜X] \\[ERROR\\] ((?:.|${this.multiLineEolRegex})*error.*)`),
            humanReadableErrorMessage: 'Unable to build the Amplify backend definition.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'ESBuildError',
            classification: 'ERROR',
        },
        {
            // If there are multiple errors, capture all lines containing the errors
            errorRegex: new RegExp(`\\[TransformError\\]: Transform failed with .* error(s?):${this.multiLineEolRegex}(?<esBuildErrorMessage>(.*ERROR:.*${this.multiLineEolRegex})+)`),
            humanReadableErrorMessage: '{esBuildErrorMessage}',
            resolutionMessage: 'Fix the above mentioned type or syntax error in your backend definition.',
            errorName: 'ESBuildError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Amplify Backend not found in/,
            humanReadableErrorMessage: 'Backend definition could not be found in amplify directory.',
            resolutionMessage: 'Ensure that the amplify/backend.(ts|js) file exists',
            errorName: 'FileConventionError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Amplify (.*) must be defined in (.*)/,
            humanReadableErrorMessage: 'File name or path for backend definition are incorrect.',
            resolutionMessage: 'Ensure that the amplify/backend.(ts|js) file exists',
            errorName: 'FileConventionError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Updates are not allowed for property/,
            humanReadableErrorMessage: 'The changes that you are trying to apply are not supported.',
            resolutionMessage: 'The resources referenced in the error message must be deleted and recreated to apply the changes.',
            errorName: 'CFNUpdateNotSupportedError',
            classification: 'ERROR',
        },
        {
            // This error originates from Cognito service when user tries to change UserPool attributes which is not allowed
            // https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html
            // Remapping to `UpdateNotSupported` will allow sandbox to prompt users for resetting their environment
            errorRegex: /Invalid AttributeDataType input, consider using the provided AttributeDataType enum/,
            humanReadableErrorMessage: 'User pool attributes cannot be changed after a user pool has been created.',
            resolutionMessage: 'To change these attributes, remove `defineAuth` from your backend, deploy, then add it back. Note that removing `defineAuth` and deploying will delete any users stored in your UserPool.',
            errorName: 'CFNUpdateNotSupportedError',
            classification: 'ERROR',
        },
        {
            // Error: .* is printed to stderr during cdk synth
            // Also extracts the first line in the stack where the error happened
            errorRegex: new RegExp(`^Error: (.*${this.multiLineEolRegex}.*at.*)`, 'm'),
            humanReadableErrorMessage: 'Unable to build the Amplify backend definition.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'BackendSynthError',
            classification: 'ERROR',
        },
        {
            // This happens when 'defineBackend' call is missing in customer's app.
            // 'defineBackend' creates CDK app in memory. If it's missing then no cdk.App exists in memory and nothing is rendered.
            // During 'cdk synth' CDK CLI attempts to read CDK assembly after calling customer's app.
            // But no files are rendered causing it to fail.
            errorRegex: /ENOENT: no such file or directory, open '\.amplify.artifacts.cdk\.out.manifest\.json'/,
            humanReadableErrorMessage: 'The Amplify backend definition is missing `defineBackend` call.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder. Ensure that `amplify/backend.ts` contains `defineBackend` call.',
            errorName: 'MissingDefineBackendError',
            classification: 'ERROR',
        },
        {
            // "Catch all": the backend entry point file is referenced in the stack indicating a problem in customer code
            errorRegex: /amplify\/backend/,
            humanReadableErrorMessage: 'Unable to build Amplify backend.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'BackendBuildError',
            classification: 'ERROR',
        },
        {
            // We capture the parameter name to show relevant error message
            errorRegex: /Failed to retrieve backend secret (?<secretName>.*) for.*ParameterNotFound/,
            humanReadableErrorMessage: `The secret {secretName} specified in the backend does not exist.`,
            resolutionMessage: `Create secrets using the command ${this.formatter.normalizeAmpxCommand('sandbox secret set')}. For more information, see https://docs.amplify.aws/gen2/deploy-and-host/sandbox-environments/features/#set-secrets`,
            errorName: 'SecretNotSetError',
            classification: 'ERROR',
        },
        {
            errorRegex: /(?<stackName>amplify-[a-z0-9-]+)(.*) failed: ValidationError: Stack:(.*) is in (?<state>.*) state and can not be updated/,
            humanReadableErrorMessage: 'The CloudFormation deployment failed due to {stackName} being in {state} state.',
            resolutionMessage: 'Find more information in the CloudFormation AWS Console for this stack.',
            errorName: 'CloudFormationDeploymentError',
            classification: 'ERROR',
        },
        {
            // Note that the order matters, this should be the last as it captures generic CFN error
            errorRegex: new RegExp(`Deployment failed: (.*)${this.multiLineEolRegex}|The stack named (.*) failed (to deploy:|creation,) (.*)`),
            humanReadableErrorMessage: 'The CloudFormation deployment has failed.',
            resolutionMessage: 'Find more information in the CloudFormation AWS Console for this stack.',
            errorName: 'CloudFormationDeploymentError',
            classification: 'ERROR',
        },
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrX2Vycm9yX21hcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jZGtfZXJyb3JfbWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxZQUFZLEVBRVosWUFBWSxFQUNaLGdCQUFnQixHQUNqQixNQUFNLDRCQUE0QixDQUFDO0FBR3BDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGNBQWM7SUFLSTtJQUpyQixpQkFBaUIsR0FBRyxTQUFTLENBQUM7SUFDdEM7O09BRUc7SUFDSCxZQUE2QixTQUF5QztRQUF6QyxjQUFTLEdBQVQsU0FBUyxDQUFnQztJQUFHLENBQUM7SUFFMUUsZUFBZSxHQUFHLENBQ2hCLEtBQVksRUFDK0IsRUFBRTtRQUM3QyxJQUFJLGVBQWUsR0FBc0IsS0FBSyxDQUFDO1FBRS9DLDRFQUE0RTtRQUM1RSxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1RCxJQUFJLFlBQVksRUFBRTtZQUNoQixPQUFPLFlBQVksQ0FBQztTQUNyQjtRQUVELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUM5RCxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQzFDLENBQUM7UUFFRixJQUFJLGFBQWEsRUFBRTtZQUNqQix5REFBeUQ7WUFDekQsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRWxFLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QyxnSEFBZ0g7Z0JBQ2hILElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtvQkFDdEIsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUss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QXlCLEVBQ3ZCLGlFQUFpRTtZQUNuRSxpQkFBaUIsRUFDZix3SEFBd0g7WUFDMUgsU0FBUyxFQUFFLDJCQUEyQjtZQUN0QyxjQUFjLEVBQUUsT0FBTztTQUN4QjtRQUNEO1lBQ0UsNkdBQTZHO1lBQzdHLFVBQVUsRUFBRSxrQkFBa0I7WUFDOUIseUJBQXlCLEVBQUUsa0NBQWtDO1lBQzdELGlCQUFpQixFQUNmLG1GQUFtRjtZQUNyRixTQUFTLEVBQUUsbUJBQW1CO1lBQzlCLGNBQWMsRUFBRSxPQUFPO1NBQ3hCO1FBQ0Q7WUFDRSwrREFBK0Q7WUFDL0QsVUFBVSxFQUNSLDRFQUE0RTtZQUM5RSx5QkFBeUIsRUFBRSxrRUFBa0U7WUFDN0YsaUJBQWlCLEVBQUUsb0NBQW9DLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQ3hGLG9CQUFvQixDQUNyQixzSEFBc0g7WUFDdkgsU0FBUyxFQUFFLG1CQUFtQjtZQUM5QixjQUFjLEVBQUUsT0FBTztTQUN4QjtRQUNEO1lBQ0UsVUFBVSxFQUNSLDBIQUEwSDtZQUM1SCx5QkFBeUIsRUFDdkIsaUZBQWlGO1lBQ25GLGlCQUFpQixFQUNmLHlFQUF5RTtZQUMzRSxTQUFTLEVBQUUsK0JBQStCO1lBQzFDLGNBQWMsRUFBRSxPQUFPO1NBQ3hCO1FBQ0Q7WUFDRSx3RkFBd0Y7WUFDeEYsVUFBVSxFQUFFLElBQUksTUFBTSxDQUNwQiwwQkFBMEIsSUFBSSxDQUFDLGlCQUFpQiwwREFBMEQsQ0FDM0c7WUFDRCx5QkFBeUIsRUFBRSwyQ0FBMkM7WUFDdEUsaUJBQWlCLEVBQ2YseUVBQXlFO1lBQzNFLFNBQVMsRUFBRSwrQkFBK0I7WUFDMUMsY0FBYyxFQUFFLE9BQU87U0FDeEI7S0FDRixDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbXBsaWZ5RXJyb3IsXG4gIEFtcGxpZnlFcnJvckNsYXNzaWZpY2F0aW9uLFxuICBBbXBsaWZ5RmF1bHQsXG4gIEFtcGxpZnlVc2VyRXJyb3IsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IEJhY2tlbmREZXBsb3llck91dHB1dEZvcm1hdHRlciB9IGZyb20gJy4vdHlwZXMuanMnO1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgQ0RLIGVycm9yIG1lc3NhZ2VzIHRvIGh1bWFuIHJlYWRhYmxlIG9uZXNcbiAqL1xuZXhwb3J0IGNsYXNzIENka0Vycm9yTWFwcGVyIHtcbiAgcHJpdmF0ZSBtdWx0aUxpbmVFb2xSZWdleCA9ICdbXFxyXFxuXSsnO1xuICAvKipcbiAgICogSW5zdGFudGlhdGUgd2l0aCBhIGZvcm1hdHRlciB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgZm9ybWF0dGluZyBDTEkgY29tbWFuZHMgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZm9ybWF0dGVyOiBCYWNrZW5kRGVwbG95ZXJPdXRwdXRGb3JtYXR0ZXIpIHt9XG5cbiAgZ2V0QW1wbGlmeUVycm9yID0gKFxuICAgIGVycm9yOiBFcnJvclxuICApOiBBbXBsaWZ5RXJyb3I8Q0RLRGVwbG95bWVudEVycm9yIHwgc3RyaW5nPiA9PiB7XG4gICAgbGV0IHVuZGVybHlpbmdFcnJvcjogRXJyb3IgfCB1bmRlZmluZWQgPSBlcnJvcjtcblxuICAgIC8vIENoZWNrIGlmIHRoZXJlIHdhcyBhbiBBbXBsaWZ5IGVycm9yIHRocm93biBkdXJpbmcgY2hpbGQgcHJvY2VzcyBleGVjdXRpb25cbiAgICBjb25zdCBhbXBsaWZ5RXJyb3IgPSBBbXBsaWZ5RXJyb3IuZnJvbVN0ZGVycihlcnJvci5tZXNzYWdlKTtcbiAgICBpZiAoYW1wbGlmeUVycm9yKSB7XG4gICAgICByZXR1cm4gYW1wbGlmeUVycm9yO1xuICAgIH1cblxuICAgIGNvbnN0IG1hdGNoaW5nRXJyb3IgPSB0aGlzLmdldEtub3duRXJyb3JzKCkuZmluZCgoa25vd25FcnJvcikgPT5cbiAgICAgIGtub3duRXJyb3IuZXJyb3JSZWdleC50ZXN0KGVycm9yLm1lc3NhZ2UpXG4gICAgKTtcblxuICAgIGlmIChtYXRjaGluZ0Vycm9yKSB7XG4gICAgICAvLyBFeHRyYWN0IG1lYW5pbmdmdWwgY29udGV4dHVhbCBpbmZvcm1hdGlvbiBpZiBhdmFpbGFibGVcbiAgICAgIGNvbnN0IG1hdGNoR3JvdXBzID0gZXJyb3IubWVzc2FnZS5tYXRjaChtYXRjaGluZ0Vycm9yLmVycm9yUmVnZXgpO1xuXG4gICAgICBpZiAobWF0Y2hHcm91cHMgJiYgbWF0Y2hHcm91cHMubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBJZiB0aGUgY29udGV4dHVhbCBpbmZvcm1hdGlvbiBjYW4gYmUgdXNlZCBpbiB0aGUgZXJyb3IgbWVzc2FnZSB1c2UgaXQsIGVsc2UgY29uc2lkZXIgaXQgYXMgYSBkb3duc3RyZWFtIGNhdXNlXG4gICAgICAgIGlmIChtYXRjaEdyb3Vwcy5ncm91cHMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhtYXRjaEdyb3Vwcy5ncm91cHMpKSB7XG4gICAgICAgICAgICBjb25zdCBwbGFjZUhvbGRlciA9IGB7JHtrZXl9fWA7XG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdFcnJvci5odW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlLmluY2x1ZGVzKHBsYWNlSG9sZGVyKSkge1xuICAgICAgICAgICAgICBtYXRjaGluZ0Vycm9yLmh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgIG1hdGNoaW5nRXJyb3IuaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgcGxhY2VIb2xkZXIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBzdGRlcnIgZHVtcCBpbiB0aGUgdW5kZXJseWluZyBlcnJvclxuICAgICAgICAgICAgICB1bmRlcmx5aW5nRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHJlbW92ZSBhbnkgdHJhaWxpbmcgRU9MXG4gICAgICAgICAgbWF0Y2hpbmdFcnJvci5odW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlID1cbiAgICAgICAgICAgIG1hdGNoaW5nRXJyb3IuaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZS5yZXBsYWNlKFxuICAgICAgICAgICAgICBuZXcgUmVnRXhwKGAke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9JGApLFxuICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bmRlcmx5aW5nRXJyb3IubWVzc2FnZSA9IG1hdGNoR3JvdXBzWzBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaGluZ0Vycm9yLmNsYXNzaWZpY2F0aW9uID09PSAnRVJST1InXG4gICAgICAgID8gbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICBtYXRjaGluZ0Vycm9yLmVycm9yTmFtZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogbWF0Y2hpbmdFcnJvci5odW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgICByZXNvbHV0aW9uOiBtYXRjaGluZ0Vycm9yLnJlc29sdXRpb25NZXNzYWdlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVuZGVybHlpbmdFcnJvclxuICAgICAgICAgIClcbiAgICAgICAgOiBuZXcgQW1wbGlmeUZhdWx0KFxuICAgICAgICAgICAgbWF0Y2hpbmdFcnJvci5lcnJvck5hbWUsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IG1hdGNoaW5nRXJyb3IuaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogbWF0Y2hpbmdFcnJvci5yZXNvbHV0aW9uTWVzc2FnZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bmRlcmx5aW5nRXJyb3JcbiAgICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gQW1wbGlmeUVycm9yLmZyb21FcnJvcihlcnJvcik7XG4gIH07XG5cbiAgcHJpdmF0ZSBnZXRLbm93bkVycm9ycyA9ICgpOiBBcnJheTx7XG4gICAgZXJyb3JSZWdleDogUmVnRXhwO1xuICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6IHN0cmluZztcbiAgICByZXNvbHV0aW9uTWVzc2FnZTogc3RyaW5nO1xuICAgIGVycm9yTmFtZTogQ0RLRGVwbG95bWVudEVycm9yO1xuICAgIGNsYXNzaWZpY2F0aW9uOiBBbXBsaWZ5RXJyb3JDbGFzc2lmaWNhdGlvbjtcbiAgfT4gPT4gW1xuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9FeHBpcmVkVG9rZW58RXJyb3I6IFRoZSBzZWN1cml0eSB0b2tlbiBpbmNsdWRlZCBpbiB0aGUgcmVxdWVzdCBpcyBleHBpcmVkLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdUaGUgc2VjdXJpdHkgdG9rZW4gaW5jbHVkZWQgaW4gdGhlIHJlcXVlc3QgaXMgaW52YWxpZC4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgIFwiUGxlYXNlIHVwZGF0ZSB5b3VyIEFXUyBjcmVkZW50aWFscy4gWW91IGNhbiBkbyB0aGlzIGJ5IHJ1bm5pbmcgYGF3cyBjb25maWd1cmVgIG9yIGJ5IHVwZGF0aW5nIHlvdXIgQVdTIGNyZWRlbnRpYWxzIGZpbGUuIElmIHlvdSdyZSB1c2luZyB0ZW1wb3JhcnkgY3JlZGVudGlhbHMsIHlvdSBtYXkgbmVlZCB0byBvYnRhaW4gbmV3IG9uZXMuXCIsXG4gICAgICBlcnJvck5hbWU6ICdFeHBpcmVkVG9rZW5FcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6IC9BY2Nlc3MgRGVuaWVkLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdUaGUgZGVwbG95bWVudCByb2xlIGRvZXMgbm90IGhhdmUgc3VmZmljaWVudCBwZXJtaXNzaW9ucyB0byBwZXJmb3JtIHRoaXMgZGVwbG95bWVudC4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdFbnN1cmUgeW91ciBkZXBsb3ltZW50IHJvbGUgaGFzIHRoZSBBbXBsaWZ5QmFja2VuZERlcGxveUZ1bGxBY2Nlc3Mgcm9sZSBhbG9uZyB3aXRoIGFueSBhZGRpdGlvbmFsIHBlcm1pc3Npb25zIHJlcXVpcmVkIHRvIGRlcGxveSB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbi4nLFxuICAgICAgZXJyb3JOYW1lOiAnQWNjZXNzRGVuaWVkRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OlxuICAgICAgICAvKEhhcyB0aGUgZW52aXJvbm1lbnQgYmVlbiBib290c3RyYXBwZWQpfChJcyBhY2NvdW50IFxcZCsgYm9vdHN0cmFwcGVkKXwoSXMgdGhpcyBhY2NvdW50IGJvb3RzdHJhcHBlZCkvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTpcbiAgICAgICAgJ1RoaXMgQVdTIGFjY291bnQgYW5kIHJlZ2lvbiBoYXMgbm90IGJlZW4gYm9vdHN0cmFwcGVkLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ1J1biBgY2RrIGJvb3RzdHJhcCBhd3M6Ly97WU9VUl9BQ0NPVU5UX0lEfS97WU9VUl9SRUdJT059YCBsb2NhbGx5IHRvIHJlc29sdmUgdGhpcy4nLFxuICAgICAgZXJyb3JOYW1lOiAnQm9vdHN0cmFwTm90RGV0ZWN0ZWRFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9UaGlzIENESyBDTEkgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgQ0RLIGxpYnJhcnkgdXNlZCBieSB5b3VyIGFwcGxpY2F0aW9uXFwuIFBsZWFzZSB1cGdyYWRlIHRoZSBDTEkgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uXFwuLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgIFwiSW5zdGFsbGVkICdhd3MtY2RrJyBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGluc3RhbGxlZCAnYXdzLWNkay1saWInLlwiLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgIFwiTWFrZSBzdXJlIHRoYXQgdmVyc2lvbiBvZiAnYXdzLWNkaycgaXMgZ3JlYXRlciBvciBlcXVhbCB0byB2ZXJzaW9uIG9mICdhd3MtY2RrLWxpYidcIixcbiAgICAgIGVycm9yTmFtZTogJ0NES1ZlcnNpb25NaXNtYXRjaEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDogbmV3IFJlZ0V4cChcbiAgICAgICAgYChTeW50YXhFcnJvcnxSZWZlcmVuY2VFcnJvcnxUeXBlRXJyb3IpKCBcXFxcW1tBLVpfXStdKT86KCg/Oi58JHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fSkqP2F0IC4qKWBcbiAgICAgICksXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVW5hYmxlIHRvIGJ1aWxkIHRoZSBBbXBsaWZ5IGJhY2tlbmQgZGVmaW5pdGlvbi4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlciBmb3Igc3ludGF4IGFuZCB0eXBlIGVycm9ycy4nLFxuICAgICAgZXJyb3JOYW1lOiAnU3ludGF4RXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiAvVW5hYmxlIHRvIHJlc29sdmUgQVdTIGFjY291bnQgdG8gdXNlLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdVbmFibGUgdG8gcmVzb2x2ZSBBV1MgYWNjb3VudCB0byB1c2UuIEl0IG11c3QgYmUgZWl0aGVyIGNvbmZpZ3VyZWQgd2hlbiB5b3UgZGVmaW5lIHlvdXIgQ0RLIFN0YWNrLCBvciB0aHJvdWdoIHRoZSBlbnZpcm9ubWVudCcsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ1lvdSBjYW4gcmV0cnkgeW91ciBsYXN0IHJlcXVlc3QgYXMgdGhpcyBpcyBtb3N0IGxpa2VseSBhIHRyYW5zaWVudCBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3MtY2RrL2lzc3Vlcy8yNDc0NC4gSWYgdGhlIGVycm9yIHBlcnNpc3RzIGVuc3VyZSB5b3VyIGxvY2FsIEFXUyBjcmVkZW50aWFscyBhcmUgdmFsaWQuJyxcbiAgICAgIGVycm9yTmFtZTogJ0NES1Jlc29sdmVBV1NBY2NvdW50RXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiAvRUFDQ0VTKC4qKS8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiAnRmlsZSBwZXJtaXNzaW9ucyBlcnJvcicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ0NoZWNrIHRoYXQgeW91IGhhdmUgdGhlIHJpZ2h0IGFjY2VzcyBwZXJtaXNzaW9ucyB0byB0aGUgbWVudGlvbmVkIGZpbGUnLFxuICAgICAgZXJyb3JOYW1lOiAnRmlsZVBlcm1pc3Npb25zRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiBuZXcgUmVnRXhwKFxuICAgICAgICBgXFxcXFtFUlJfTU9EVUxFX05PVF9GT1VORFxcXFxdOiguKikke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9fEVycm9yOiBDYW5ub3QgZmluZCBtb2R1bGUgKC4qKWBcbiAgICAgICksXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiAnQ2Fubm90IGZpbmQgbW9kdWxlJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICAnQ2hlY2sgeW91ciBiYWNrZW5kIGRlZmluaXRpb24gaW4gdGhlIGBhbXBsaWZ5YCBmb2xkZXIgZm9yIG1pc3NpbmcgZmlsZSBvciBwYWNrYWdlIGltcG9ydHMuIFRyeSBpbnN0YWxsaW5nIHRoZW0gd2l0aCB5b3VyIHBhY2thZ2UgbWFuYWdlci4nLFxuICAgICAgZXJyb3JOYW1lOiAnTW9kdWxlTm90Rm91bmRFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIFRydW5jYXRlIHRoZSBjZGsgZXJyb3IgbWVzc2FnZSdzIHNlY29uZCBsaW5lIChJbnZva2UgdGhlIENMSSBpbiBzZXF1ZW5jZSwgb3IgdXNlICctLW91dHB1dCcgdG8gc3ludGggaW50byBkaWZmZXJlbnQgZGlyZWN0b3JpZXMuKVxuICAgICAgZXJyb3JSZWdleDpcbiAgICAgICAgL0Fub3RoZXIgQ0xJICguKikgaXMgY3VycmVudGx5KC4qKVxcLiB8T3RoZXIgQ0xJcyAoLiopIGFyZSBjdXJyZW50bHkgcmVhZGluZyBmcm9tKC4qKVxcLiAvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogJ011bHRpcGxlIHNhbmRib3ggaW5zdGFuY2VzIGRldGVjdGVkLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ01ha2Ugc3VyZSBvbmx5IG9uZSBpbnN0YW5jZSBvZiBzYW5kYm94IGlzIHJ1bm5pbmcgZm9yIHRoaXMgcHJvamVjdCcsXG4gICAgICBlcnJvck5hbWU6ICdNdWx0aXBsZVNhbmRib3hJbnN0YW5jZXNFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIEFsc28gZXh0cmFjdHMgdGhlIGZpcnN0IGxpbmUgaW4gdGhlIHN0YWNrIHdoZXJlIHRoZSBlcnJvciBoYXBwZW5lZFxuICAgICAgZXJyb3JSZWdleDogbmV3IFJlZ0V4cChcbiAgICAgICAgYFxcXFxbZXNidWlsZCBFcnJvclxcXFxdOiAoKD86Lnwke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9KSo/YXQgLiopYFxuICAgICAgKSxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdVbmFibGUgdG8gYnVpbGQgdGhlIEFtcGxpZnkgYmFja2VuZCBkZWZpbml0aW9uLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ0NoZWNrIHlvdXIgYmFja2VuZCBkZWZpbml0aW9uIGluIHRoZSBgYW1wbGlmeWAgZm9sZGVyIGZvciBzeW50YXggYW5kIHR5cGUgZXJyb3JzLicsXG4gICAgICBlcnJvck5hbWU6ICdFU0J1aWxkRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBBbHNvIGV4dHJhY3RzIHRoZSBmaXJzdCBsaW5lIGluIHRoZSBzdGFjayB3aGVyZSB0aGUgZXJyb3IgaGFwcGVuZWRcbiAgICAgIGVycm9yUmVnZXg6IG5ldyBSZWdFeHAoXG4gICAgICAgIGBb4pyYWF0gXFxcXFtFUlJPUlxcXFxdICgoPzoufCR7dGhpcy5tdWx0aUxpbmVFb2xSZWdleH0pKmVycm9yLiopYFxuICAgICAgKSxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdVbmFibGUgdG8gYnVpbGQgdGhlIEFtcGxpZnkgYmFja2VuZCBkZWZpbml0aW9uLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ0NoZWNrIHlvdXIgYmFja2VuZCBkZWZpbml0aW9uIGluIHRoZSBgYW1wbGlmeWAgZm9sZGVyIGZvciBzeW50YXggYW5kIHR5cGUgZXJyb3JzLicsXG4gICAgICBlcnJvck5hbWU6ICdFU0J1aWxkRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgZXJyb3JzLCBjYXB0dXJlIGFsbCBsaW5lcyBjb250YWluaW5nIHRoZSBlcnJvcnNcbiAgICAgIGVycm9yUmVnZXg6IG5ldyBSZWdFeHAoXG4gICAgICAgIGBcXFxcW1RyYW5zZm9ybUVycm9yXFxcXF06IFRyYW5zZm9ybSBmYWlsZWQgd2l0aCAuKiBlcnJvcihzPyk6JHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fSg/PGVzQnVpbGRFcnJvck1lc3NhZ2U+KC4qRVJST1I6Lioke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9KSspYFxuICAgICAgKSxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6ICd7ZXNCdWlsZEVycm9yTWVzc2FnZX0nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdGaXggdGhlIGFib3ZlIG1lbnRpb25lZCB0eXBlIG9yIHN5bnRheCBlcnJvciBpbiB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbi4nLFxuICAgICAgZXJyb3JOYW1lOiAnRVNCdWlsZEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDogL0FtcGxpZnkgQmFja2VuZCBub3QgZm91bmQgaW4vLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTpcbiAgICAgICAgJ0JhY2tlbmQgZGVmaW5pdGlvbiBjb3VsZCBub3QgYmUgZm91bmQgaW4gYW1wbGlmeSBkaXJlY3RvcnkuJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOiAnRW5zdXJlIHRoYXQgdGhlIGFtcGxpZnkvYmFja2VuZC4odHN8anMpIGZpbGUgZXhpc3RzJyxcbiAgICAgIGVycm9yTmFtZTogJ0ZpbGVDb252ZW50aW9uRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiAvQW1wbGlmeSAoLiopIG11c3QgYmUgZGVmaW5lZCBpbiAoLiopLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdGaWxlIG5hbWUgb3IgcGF0aCBmb3IgYmFja2VuZCBkZWZpbml0aW9uIGFyZSBpbmNvcnJlY3QuJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOiAnRW5zdXJlIHRoYXQgdGhlIGFtcGxpZnkvYmFja2VuZC4odHN8anMpIGZpbGUgZXhpc3RzJyxcbiAgICAgIGVycm9yTmFtZTogJ0ZpbGVDb252ZW50aW9uRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiAvVXBkYXRlcyBhcmUgbm90IGFsbG93ZWQgZm9yIHByb3BlcnR5LyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdUaGUgY2hhbmdlcyB0aGF0IHlvdSBhcmUgdHJ5aW5nIHRvIGFwcGx5IGFyZSBub3Qgc3VwcG9ydGVkLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ1RoZSByZXNvdXJjZXMgcmVmZXJlbmNlZCBpbiB0aGUgZXJyb3IgbWVzc2FnZSBtdXN0IGJlIGRlbGV0ZWQgYW5kIHJlY3JlYXRlZCB0byBhcHBseSB0aGUgY2hhbmdlcy4nLFxuICAgICAgZXJyb3JOYW1lOiAnQ0ZOVXBkYXRlTm90U3VwcG9ydGVkRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBUaGlzIGVycm9yIG9yaWdpbmF0ZXMgZnJvbSBDb2duaXRvIHNlcnZpY2Ugd2hlbiB1c2VyIHRyaWVzIHRvIGNoYW5nZSBVc2VyUG9vbCBhdHRyaWJ1dGVzIHdoaWNoIGlzIG5vdCBhbGxvd2VkXG4gICAgICAvLyBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29nbml0by9sYXRlc3QvZGV2ZWxvcGVyZ3VpZGUvdXNlci1wb29sLXNldHRpbmdzLWF0dHJpYnV0ZXMuaHRtbFxuICAgICAgLy8gUmVtYXBwaW5nIHRvIGBVcGRhdGVOb3RTdXBwb3J0ZWRgIHdpbGwgYWxsb3cgc2FuZGJveCB0byBwcm9tcHQgdXNlcnMgZm9yIHJlc2V0dGluZyB0aGVpciBlbnZpcm9ubWVudFxuICAgICAgZXJyb3JSZWdleDpcbiAgICAgICAgL0ludmFsaWQgQXR0cmlidXRlRGF0YVR5cGUgaW5wdXQsIGNvbnNpZGVyIHVzaW5nIHRoZSBwcm92aWRlZCBBdHRyaWJ1dGVEYXRhVHlwZSBlbnVtLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdVc2VyIHBvb2wgYXR0cmlidXRlcyBjYW5ub3QgYmUgY2hhbmdlZCBhZnRlciBhIHVzZXIgcG9vbCBoYXMgYmVlbiBjcmVhdGVkLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ1RvIGNoYW5nZSB0aGVzZSBhdHRyaWJ1dGVzLCByZW1vdmUgYGRlZmluZUF1dGhgIGZyb20geW91ciBiYWNrZW5kLCBkZXBsb3ksIHRoZW4gYWRkIGl0IGJhY2suIE5vdGUgdGhhdCByZW1vdmluZyBgZGVmaW5lQXV0aGAgYW5kIGRlcGxveWluZyB3aWxsIGRlbGV0ZSBhbnkgdXNlcnMgc3RvcmVkIGluIHlvdXIgVXNlclBvb2wuJyxcbiAgICAgIGVycm9yTmFtZTogJ0NGTlVwZGF0ZU5vdFN1cHBvcnRlZEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgLy8gRXJyb3I6IC4qIGlzIHByaW50ZWQgdG8gc3RkZXJyIGR1cmluZyBjZGsgc3ludGhcbiAgICAgIC8vIEFsc28gZXh0cmFjdHMgdGhlIGZpcnN0IGxpbmUgaW4gdGhlIHN0YWNrIHdoZXJlIHRoZSBlcnJvciBoYXBwZW5lZFxuICAgICAgZXJyb3JSZWdleDogbmV3IFJlZ0V4cChcbiAgICAgICAgYF5FcnJvcjogKC4qJHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fS4qYXQuKilgLFxuICAgICAgICAnbSdcbiAgICAgICksXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVW5hYmxlIHRvIGJ1aWxkIHRoZSBBbXBsaWZ5IGJhY2tlbmQgZGVmaW5pdGlvbi4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlciBmb3Igc3ludGF4IGFuZCB0eXBlIGVycm9ycy4nLFxuICAgICAgZXJyb3JOYW1lOiAnQmFja2VuZFN5bnRoRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBUaGlzIGhhcHBlbnMgd2hlbiAnZGVmaW5lQmFja2VuZCcgY2FsbCBpcyBtaXNzaW5nIGluIGN1c3RvbWVyJ3MgYXBwLlxuICAgICAgLy8gJ2RlZmluZUJhY2tlbmQnIGNyZWF0ZXMgQ0RLIGFwcCBpbiBtZW1vcnkuIElmIGl0J3MgbWlzc2luZyB0aGVuIG5vIGNkay5BcHAgZXhpc3RzIGluIG1lbW9yeSBhbmQgbm90aGluZyBpcyByZW5kZXJlZC5cbiAgICAgIC8vIER1cmluZyAnY2RrIHN5bnRoJyBDREsgQ0xJIGF0dGVtcHRzIHRvIHJlYWQgQ0RLIGFzc2VtYmx5IGFmdGVyIGNhbGxpbmcgY3VzdG9tZXIncyBhcHAuXG4gICAgICAvLyBCdXQgbm8gZmlsZXMgYXJlIHJlbmRlcmVkIGNhdXNpbmcgaXQgdG8gZmFpbC5cbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9FTk9FTlQ6IG5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnksIG9wZW4gJ1xcLmFtcGxpZnkuYXJ0aWZhY3RzLmNka1xcLm91dC5tYW5pZmVzdFxcLmpzb24nLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdUaGUgQW1wbGlmeSBiYWNrZW5kIGRlZmluaXRpb24gaXMgbWlzc2luZyBgZGVmaW5lQmFja2VuZGAgY2FsbC4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlci4gRW5zdXJlIHRoYXQgYGFtcGxpZnkvYmFja2VuZC50c2AgY29udGFpbnMgYGRlZmluZUJhY2tlbmRgIGNhbGwuJyxcbiAgICAgIGVycm9yTmFtZTogJ01pc3NpbmdEZWZpbmVCYWNrZW5kRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBcIkNhdGNoIGFsbFwiOiB0aGUgYmFja2VuZCBlbnRyeSBwb2ludCBmaWxlIGlzIHJlZmVyZW5jZWQgaW4gdGhlIHN0YWNrIGluZGljYXRpbmcgYSBwcm9ibGVtIGluIGN1c3RvbWVyIGNvZGVcbiAgICAgIGVycm9yUmVnZXg6IC9hbXBsaWZ5XFwvYmFja2VuZC8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiAnVW5hYmxlIHRvIGJ1aWxkIEFtcGxpZnkgYmFja2VuZC4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlciBmb3Igc3ludGF4IGFuZCB0eXBlIGVycm9ycy4nLFxuICAgICAgZXJyb3JOYW1lOiAnQmFja2VuZEJ1aWxkRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBXZSBjYXB0dXJlIHRoZSBwYXJhbWV0ZXIgbmFtZSB0byBzaG93IHJlbGV2YW50IGVycm9yIG1lc3NhZ2VcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9GYWlsZWQgdG8gcmV0cmlldmUgYmFja2VuZCBzZWNyZXQgKD88c2VjcmV0TmFtZT4uKikgZm9yLipQYXJhbWV0ZXJOb3RGb3VuZC8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiBgVGhlIHNlY3JldCB7c2VjcmV0TmFtZX0gc3BlY2lmaWVkIGluIHRoZSBiYWNrZW5kIGRvZXMgbm90IGV4aXN0LmAsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTogYENyZWF0ZSBzZWNyZXRzIHVzaW5nIHRoZSBjb21tYW5kICR7dGhpcy5mb3JtYXR0ZXIubm9ybWFsaXplQW1weENvbW1hbmQoXG4gICAgICAgICdzYW5kYm94IHNlY3JldCBzZXQnXG4gICAgICApfS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBodHRwczovL2RvY3MuYW1wbGlmeS5hd3MvZ2VuMi9kZXBsb3ktYW5kLWhvc3Qvc2FuZGJveC1lbnZpcm9ubWVudHMvZmVhdHVyZXMvI3NldC1zZWNyZXRzYCxcbiAgICAgIGVycm9yTmFtZTogJ1NlY3JldE5vdFNldEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDpcbiAgICAgICAgLyg/PHN0YWNrTmFtZT5hbXBsaWZ5LVthLXowLTktXSspKC4qKSBmYWlsZWQ6IFZhbGlkYXRpb25FcnJvcjogU3RhY2s6KC4qKSBpcyBpbiAoPzxzdGF0ZT4uKikgc3RhdGUgYW5kIGNhbiBub3QgYmUgdXBkYXRlZC8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVGhlIENsb3VkRm9ybWF0aW9uIGRlcGxveW1lbnQgZmFpbGVkIGR1ZSB0byB7c3RhY2tOYW1lfSBiZWluZyBpbiB7c3RhdGV9IHN0YXRlLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ0ZpbmQgbW9yZSBpbmZvcm1hdGlvbiBpbiB0aGUgQ2xvdWRGb3JtYXRpb24gQVdTIENvbnNvbGUgZm9yIHRoaXMgc3RhY2suJyxcbiAgICAgIGVycm9yTmFtZTogJ0Nsb3VkRm9ybWF0aW9uRGVwbG95bWVudEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgLy8gTm90ZSB0aGF0IHRoZSBvcmRlciBtYXR0ZXJzLCB0aGlzIHNob3VsZCBiZSB0aGUgbGFzdCBhcyBpdCBjYXB0dXJlcyBnZW5lcmljIENGTiBlcnJvclxuICAgICAgZXJyb3JSZWdleDogbmV3IFJlZ0V4cChcbiAgICAgICAgYERlcGxveW1lbnQgZmFpbGVkOiAoLiopJHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fXxUaGUgc3RhY2sgbmFtZWQgKC4qKSBmYWlsZWQgKHRvIGRlcGxveTp8Y3JlYXRpb24sKSAoLiopYFxuICAgICAgKSxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6ICdUaGUgQ2xvdWRGb3JtYXRpb24gZGVwbG95bWVudCBoYXMgZmFpbGVkLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ0ZpbmQgbW9yZSBpbmZvcm1hdGlvbiBpbiB0aGUgQ2xvdWRGb3JtYXRpb24gQVdTIENvbnNvbGUgZm9yIHRoaXMgc3RhY2suJyxcbiAgICAgIGVycm9yTmFtZTogJ0Nsb3VkRm9ybWF0aW9uRGVwbG95bWVudEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gIF07XG59XG5cbmV4cG9ydCB0eXBlIENES0RlcGxveW1lbnRFcnJvciA9XG4gIHwgJ0FjY2Vzc0RlbmllZEVycm9yJ1xuICB8ICdCYWNrZW5kQnVpbGRFcnJvcidcbiAgfCAnQmFja2VuZFN5bnRoRXJyb3InXG4gIHwgJ0Jvb3RzdHJhcE5vdERldGVjdGVkRXJyb3InXG4gIHwgJ0NES1Jlc29sdmVBV1NBY2NvdW50RXJyb3InXG4gIHwgJ0NES1ZlcnNpb25NaXNtYXRjaEVycm9yJ1xuICB8ICdDRk5VcGRhdGVOb3RTdXBwb3J0ZWRFcnJvcidcbiAgfCAnQ2xvdWRGb3JtYXRpb25EZXBsb3ltZW50RXJyb3InXG4gIHwgJ0ZpbGVQZXJtaXNzaW9uc0Vycm9yJ1xuICB8ICdNaXNzaW5nRGVmaW5lQmFja2VuZEVycm9yJ1xuICB8ICdNdWx0aXBsZVNhbmRib3hJbnN0YW5jZXNFcnJvcidcbiAgfCAnRVNCdWlsZEVycm9yJ1xuICB8ICdFeHBpcmVkVG9rZW5FcnJvcidcbiAgfCAnRmlsZUNvbnZlbnRpb25FcnJvcidcbiAgfCAnTW9kdWxlTm90Rm91bmRFcnJvcidcbiAgfCAnU2VjcmV0Tm90U2V0RXJyb3InXG4gIHwgJ1N5bnRheEVycm9yJztcbiJdfQ==